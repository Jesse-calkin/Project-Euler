//
//  two.swift
//  Project Euler
//
//  Created by Jesse Calkin on 6/3/14.
//  Copyright (c) 2014 Jesse Calkin. All rights reserved.
//
//      Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//      1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//      By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

import Foundation

let Phi = 1.618033988749894848204586834365638117720309179805762862135448
let phi = -0.618033988749894848204586834365638117720309179805762862135448
let valueLimit = 4000000.0
var result: Double[] = []

func binet(n: Double) -> Double {
    return floor(((pow(Phi,n)/sqrt(5)) - (pow(phi,n)/sqrt(5))))
}

func looper() -> Double {
    var fib = 0.0
    
    for i in 1.0...40.0 {
        fib = binet(i)
        if (fib % 2 == 0) && (fib <= valueLimit) {
            result.append(fib)
        }
    }
    var sum = 0.0
    
    for n in result {
        sum += n
    }
    
    return sum
}

func answerTwo() {
    println("The sum of the even-valued terms in the Fibonacci sequence whose values do not exceed four million is \(looper())")
}
//4613732